import java.util.ArrayList;

//Author: Aidan Wadin
//Date: November 26, 2018
//Purpose: This is the Table class that uses the strategy pattern as well as generics

public class Table<T>
{
	//List of items on the table
	private ArrayList<T> list;
	
	//Whatever strategy pattern we choose to use
	private Strategy<T> S;
	
	//The column identifiers will always be a string (I assume)
	private ArrayList<String> cols;
	
	//Constructor
	public Table(Strategy<T> s, ArrayList<String> cols)
	{
		this.S = s;
		this.list = new ArrayList<T>();
		this.cols = cols;
	}
	
	public void addItem(T item)
	{
		list.add(item);
	}
	
	public void removeItem(T item)
	{
		list.remove(item);
	}
	
	//This is used later to create the table output properly. It is used to create a good length line under the header without being too big
	public int headerLength(ArrayList<String> input)
	{
		int size = 0;
		for(String s : input)
		{
			//This +1 is for a space following the string 
			size += 2;
			size += s.length();
		}
		return size;
	}
	
	//This prints out the header the same way every time
	public void printHeader()
	{
		//Print out the header
		for(int i = 0; i < cols.size(); i++)
		{
			//For every element in our header arraylist we will print it out in this very structured format generated by the "format" system call
			System.out.format("%2s %2s %2s", "", cols.get(i), "");
		}
		
		System.out.println( );
		
		//Print out the line under the header
		for(int i = 0; i < headerLength(this.cols) * 1.5; i++)
		{
			System.out.print("-");
		}
		System.out.println( );
	}
	
	//This method calls the strategy method "printRow" on all the elements in the list
	public void printRows()
	{
		for(T item : list)
		{
			S.printRow(item, cols.size());
			System.out.println( );
		}
	}
	
	//This is the final print method that prints together the printing of both the header and the rows in a properly structured format
	public void print()
	{
		printHeader();
		printRows();
	}
}
